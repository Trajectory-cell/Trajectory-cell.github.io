<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用hexo搭建个人博客</title>
    <url>/2020/03/25/BuildBlogByHexo/</url>
    <content><![CDATA[<h1 id="Hexo搭建个人博客"><a href="#Hexo搭建个人博客" class="headerlink" title="Hexo搭建个人博客"></a>Hexo搭建个人博客</h1><a id="more"></a>

<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>为什么想要搭建个人博客呢？</p>
<ul>
<li>第一，最近在自学java，自学的缺点就是没有实战经验，java的知识点会忘记，所以想通过写博客的方式来巩固知识点</li>
<li>第二，在自学java过程中，我遇到了很多的错误，如：环境搭建的错误、数据库的一些错误、写代码本身出现的一些错误。这些错误都是宝贵的编写代码的经验，我想通过写博客的方式，将这些错误记录下来，以此来提升自身的代码能力</li>
<li>第三，我想通过写博客的方式来和大家分享我的一些错误和经验。</li>
</ul>
<p>为什么选择Hexo框架来搭建博客？</p>
<ul>
<li>1.静态：hexo全部生成静态文件，不仅对服务器负载小，而且快</li>
<li>2.基于node.js：我偏爱node.js</li>
<li>3.搭建起来很简单</li>
<li>4.可以直接在github平台上托管我们的博客</li>
<li>5.稳定</li>
<li>6.Hexo支持强大的主题和插件系统（就是“皮肤”好看)</li>
<li>7.最重要的一点：不用自己购买域名和服务器，便宜！！！</li>
</ul>
<h2 id="2-Hexo简介"><a href="#2-Hexo简介" class="headerlink" title="2.Hexo简介"></a>2.Hexo简介</h2><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo官网</a>进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p>
<h2 id="3-准备"><a href="#3-准备" class="headerlink" title="3.准备"></a>3.准备</h2><h3 id="3-1-Git"><a href="#3-1-Git" class="headerlink" title="3.1 Git"></a>3.1 Git</h3><ul>
<li>git:<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></li>
</ul>
<p>通过官网在下载git的下载速度很慢，可使用淘宝镜像</p>
<ul>
<li><a href="https://npm.taobao.org/mirrors/git-for-windows/" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/git-for-windows/</a></li>
</ul>
<h3 id="3-2-node-js"><a href="#3-2-node-js" class="headerlink" title="3.2 node.js"></a>3.2 node.js</h3><ul>
<li>nodejs:<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></li>
</ul>
<h3 id="3-3-GitHub账号"><a href="#3-3-GitHub账号" class="headerlink" title="3.3 GitHub账号"></a>3.3 GitHub账号</h3><p>去github上注册账号</p>
<h2 id="4-安装"><a href="#4-安装" class="headerlink" title="4.安装"></a>4.安装</h2><h3 id="4-1-安装并配置Git"><a href="#4-1-安装并配置Git" class="headerlink" title="4.1 安装并配置Git"></a>4.1 安装并配置Git</h3><p>安装一路next</p>
<p><strong><em>重点在配置</em></strong></p>
<ul>
<li><p>将安装目录添加进环境变量</p>
<ul>
<li><p>在桌面上右击“此电脑”，点击“属性”，点击“高级系统设置”</p>
<p><img src="/2020/03/25/BuildBlogByHexo/1.png" alt="image-20200325100045292"></p>
</li>
<li><p>在“系统设置”界面点击“环境变量”</p>
</li>
<li><p>选择系统变量中的Path，点击“编辑”</p>
<p><img src="/2020/03/25/BuildBlogByHexo/2.png" alt="image-20200325100125979"></p>
</li>
<li><p>找到Git安装目录，添加如下地址</p>
<p><img src="/2020/03/25/BuildBlogByHexo/3.png" alt="image-20200325100419792"></p>
</li>
</ul>
</li>
<li><p>然后在GIt Bash中设置用户名和邮箱</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"你的github用户名"</span></span><br><span class="line">$ git config --global use.email <span class="string">"你github绑定的邮箱"</span></span><br></pre></td></tr></table></figure>





</li>
</ul>
<h3 id="4-2-安装node-js"><a href="#4-2-安装node-js" class="headerlink" title="4.2 安装node.js"></a>4.2 安装node.js</h3><p>一路next</p>
<h3 id="4-3-安装Hexo"><a href="#4-3-安装Hexo" class="headerlink" title="4.3 安装Hexo"></a>4.3 安装Hexo</h3><p>1.在GIt Bash中，输入如下命令</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli（不推荐使用）</span><br></pre></td></tr></table></figure>

<p><strong><em>原因</em></strong></p>
<p>用 npm 安装话经常出现卡住而导致无法正常安装，，解决办法就是修改 npm 的安装源，这里选择淘宝 NPM 镜像。</p>
<p><img src="/2020/03/25/BuildBlogByHexo/4.png" alt="image-20200325103204497"></p>
<p>等待。。。。</p>
<p>装好之后输入cnpm -v检查是否安装好了</p>
<p><img src="/2020/03/25/BuildBlogByHexo/5.png" alt="image-20200325103337131"></p>
<p>2.安装hexo</p>
<p>在Git Bash中输入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/25/BuildBlogByHexo/6.png" alt="image-20200325103611474"></p>
<p>等待。。。。</p>
<p>装好之后输入hexo -v检查是否安装成功</p>
<p><img src="/2020/03/25/BuildBlogByHexo/7.png" alt="image-20200325103819777"></p>
<h2 id="5-生成博客"><a href="#5-生成博客" class="headerlink" title="5.生成博客"></a>5.生成博客</h2><p>1.先创建一个文件夹用来存放博客文件，我的是“MyBlog”</p>
<p>2.在Git Bash中输入“cd G:\MyBlog”进入MyBlog</p>
<p><img src="/2020/03/25/BuildBlogByHexo/8.png" alt="image-20200325104225308"></p>
<p>3.输入”hexo init”生成博客</p>
<p><img src="/2020/03/25/BuildBlogByHexo/9.png" alt="image-20200325104322473"></p>
<p>等待。。。。（时间可能有点长）</p>
<p>4.完成后，你的博客文件中会有如下文件(打码部分不是)如下图所示</p>
<p><img src="/2020/03/25/BuildBlogByHexo/10.png" alt="image-20200325104729768"></p>
<p>5.通过输入“hexo s”来启动博客</p>
<p><img src="/2020/03/25/BuildBlogByHexo/11.png" alt="image-20200325105126409"></p>
<p>6.在浏览器中输入“<a href="http://localhost:4000”就可以看到你的博客了">http://localhost:4000”就可以看到你的博客了</a></p>
<p><img src="/2020/03/25/BuildBlogByHexo/12.png" alt="image-20200325105353096"></p>
<p>（我换过主题）</p>
<p><strong>到此，我们搭建博客完成</strong></p>
<h2 id="6-部署至GitHub"><a href="#6-部署至GitHub" class="headerlink" title="6.部署至GitHub"></a>6.部署至GitHub</h2><h3 id="6-1-设置GIt的username和email（前面已完成）"><a href="#6-1-设置GIt的username和email（前面已完成）" class="headerlink" title="6.1 设置GIt的username和email（前面已完成）"></a>6.1 设置GIt的username和email（前面已完成）</h3><h3 id="6-2-生成ssh秘钥"><a href="#6-2-生成ssh秘钥" class="headerlink" title="6.2 生成ssh秘钥"></a>6.2 生成ssh秘钥</h3><p>在Git Bash中，输入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"你注册github时的邮箱"</span></span><br></pre></td></tr></table></figure>

<p>完成后，在C:\Users\Mbenben下会生成一个文件夹“.ssh”</p>
<p><img src="/2020/03/25/BuildBlogByHexo/13.png" alt="image-20200325110604986"></p>
<p>打开“.ssh”就会的到id_rsa和id_rsa.pub文件，说明生成成功。</p>
<h3 id="6-3-添加秘钥到GitHub"><a href="#6-3-添加秘钥到GitHub" class="headerlink" title="6.3 添加秘钥到GitHub"></a>6.3 添加秘钥到GitHub</h3><p>打开GitHub，登录自己的账号后</p>
<p>点击自己的头像-&gt;setting-&gt;SSH and GPG keys-&gt;Add SSH key</p>
<p>将本地id_rsa.pub中的内容粘贴到Key文本框中，随意输入一个title，</p>
<p>点击Add Key即可</p>
<p><img src="/2020/03/25/BuildBlogByHexo/14.png" alt="image-20200325111024072"></p>
<p>在Git Bash中输入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>出现如下图，则说明验证成功</p>
<p><img src="/2020/03/25/BuildBlogByHexo/15.png" alt="image-20200325111434069"></p>
<h3 id="6-4-在GitHub中创建仓库"><a href="#6-4-在GitHub中创建仓库" class="headerlink" title="6.4 在GitHub中创建仓库"></a>6.4 在GitHub中创建仓库</h3><p><img src="/2020/03/25/BuildBlogByHexo/16.png" alt="image-20200325111625028"></p>
<p><strong><em>注意</em></strong></p>
<ul>
<li>仓库名一定是：xxxx.github.io，其中xxx就是你注册GitHub的用户名</li>
</ul>
<h3 id="6-5-部署"><a href="#6-5-部署" class="headerlink" title="6.5 部署"></a>6.5 部署</h3><p>打开站点配置文件 <code>_config.yml</code></p>
<p><img src="/2020/03/25/BuildBlogByHexo/17.png" alt="image-20200325120301202"></p>
<p>翻到最后，修改为</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/你GitHub的用户名/你GitHub的用户名.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。在Git Bash中输入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/25/BuildBlogByHexo/18.png" alt="image-20200325120705056"></p>
<p>然后，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">hexo clean 清除了你之前生成的东西</span><br><span class="line">hexo generate(可简写为：hexo g) 生成静态文章</span><br><span class="line">hexo deploy(可简写为：hexo d) 部署文章</span><br><span class="line">hexo <span class="keyword">new</span> <span class="string">"博文的标题"</span> (<span class="keyword">new</span>可简写为n) 创建一个博文</span><br></pre></td></tr></table></figure>

<p><strong><em>注意：</em></strong></p>
<ul>
<li>deploy是需要输入你的github的username和password。</li>
<li>用 <strong>hexo new  “title”</strong> 生成博文，生成的博文在source\ _posts位置下，生成的是markdown文件。直接打开就可以写博客了。</li>
</ul>
<p><img src="/2020/03/25/BuildBlogByHexo/19.png" alt="image-20200325121712784"></p>
<p><strong>至此，部署完成</strong></p>
]]></content>
  </entry>
  <entry>
    <title>Spring IoC</title>
    <url>/2020/03/27/Spring-IoC/</url>
    <content><![CDATA[<h1 id="深入理解Spring-IoC"><a href="#深入理解Spring-IoC" class="headerlink" title="深入理解Spring IoC"></a>深入理解Spring IoC</h1><a id="more"></a>
<h2 id="1-IoC理论推导"><a href="#1-IoC理论推导" class="headerlink" title="1.IoC理论推导"></a>1.IoC理论推导</h2><p>举个例子：假设现在我们要获取用户的数据<br>1.在Dao层写一个UserDao的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UserDao接口的实现类为UserDaoImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"默认获取用户的数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.在service层写一个UserService的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UserService接口的实现类为UserServiceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.现在我们写一个测试类MyTest</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//用户实际调用的是业务层，Dao层不需要接触</span></span><br><span class="line">        UserServiceImpl userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line"></span><br><span class="line">        userService.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4.测试结果<br><img src="/2020/03/27/Spring-IoC/1.png" alt="result1"></p>
<p>代码本身没有任何问题</p>
<p><strong>但现在我们有了一个新的需求，我们要以MySQL方式获取用户数据</strong></p>
<p>好，那现在我们再去Dao层下新建一个UserDaoMySqlImpl实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoMySqlImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"获取MySql的数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后，去UserServiceImpl中修改代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//private UserDao userDao = new UserDaoImpl();</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao = <span class="keyword">new</span> UserDaoMySqlImplmpl();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是再测试，结果如下：<br><img src="/2020/03/27/Spring-IoC/2.png" alt="result2"></p>
<p>到这里，我们发现了一个的问题，如果我们的需求不断增加，那我们就要不断更改我们的代码，那这个代码还是好代码吗？当然不是。因为你的程序适应不了用户需求的变更。如果程序的代码量十分庞大，那么修改一次代码的成本也十分昂贵！</p>
<p>那有没有解决这个问题的方法呢？答案是有的！</p>
<p>上面的代码之所以适应不了需求的变更，主要是因为UserServiceImpl每次都需要new一个明确的对象，这就导致整个代码不灵活，适应不了用户需求的变更</p>
<p>根据上述分析，我们思考如果以一个方法来注入对象，而不是在UserServiceImpl中创建对象，那又会发生什么呢？<br>现在我们来更改UserServiceImpl中的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//利用set进行动态实现值的注入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//用户实际调用的是业务层，Dao层不需要接触</span></span><br><span class="line">        UserServiceImpl userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line"></span><br><span class="line">        userService.setUserDao(<span class="keyword">new</span> UserDaoSqlImpl());<span class="comment">//业务2</span></span><br><span class="line">        <span class="comment">//userService.setUserDao(new UserDaoImpl());//业务1</span></span><br><span class="line"></span><br><span class="line">        userService.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong><em>对比以上2个代码，我们可以得到一个革命性的变化</em></strong></p>
<ul>
<li>1.之前，程序是主动创建对象！控制权在程序员手上！</li>
<li>2.使用了set方法注入后，程序不再具有<strong><em>主动性</em></strong>，而是变成了<strong><em>被动的接受对象</em></strong></li>
</ul>
<p><strong>这种思想，从本质上解决了问题，我们程序员不用再去管理对象的创建了，系统耦合性大大降低，可以更加专注的在业务的实现上！这就是IoC(*</strong>控制反转，即程序的主动权发生了反转<strong>*)的原型</strong></p>
<h2 id="2-IoC本质"><a href="#2-IoC本质" class="headerlink" title="2.IoC本质"></a>2.IoC本质</h2><ul>
<li><strong>控制反转IoC(Inversion of Control)，是一种设计思想，DI(依赖注入)是实现IoC的一种方法</strong>，也有人认为DI只是IoC的另一种说法。没有IoC的程序中 , 我们使用面向对象编程 , 对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方，个人认为所谓控制反转就是：获得依赖对象的方式反转了。</li>
<li>采用XML方式配置Bean的时候，Bean的定义信息是和实现分离的，而采用注解的方式可以把两者合为一体，Bean的定义信息直接以注解的形式定义在实现类中，从而达到了零配置的目的。</li>
<li><strong>控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入（Dependency Injection,DI）。</strong></li>
</ul>
<p>IoC是Spring框架的核心内容，使用多种方式完美的实现了IoC，可以使用xml配置，也可以使用注解，甚至可以零配置实现IoC</p>
<p>Spring容器在初始化时先读取配置文件，根据配置文件或元数据创建与组织对象存入容器中，程序使用时再从IoC容器中取出需要的对象<br><img src="/2020/03/27/Spring-IoC/3.png" alt="sch-ioc"></p>
<h2 id="3-IoC创建对象的方式"><a href="#3-IoC创建对象的方式" class="headerlink" title="3.IoC创建对象的方式"></a>3.IoC创建对象的方式</h2><p>创建一个User类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"name="</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-1-使用无参构造创建-默认"><a href="#3-1-使用无参构造创建-默认" class="headerlink" title="3.1 使用无参构造创建(默认)"></a>3.1 使用无参构造创建(默认)</h3><h3 id="3-2-使用有参构造创建"><a href="#3-2-使用有参构造创建" class="headerlink" title="3.2 使用有参构造创建"></a>3.2 使用有参构造创建</h3><ul>
<li>下标赋值<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一种：下标赋值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.kuang.pojo.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"haha"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>类型赋值<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--第二种：类型赋值（不推荐使用）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.kuang.pojo.User"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"haha"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>参数名赋值<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.kuang.pojo.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"haha"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
上述三种方式相当于java中的<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User(<span class="string">"haha"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// user:对应 id="user"</span></span><br><span class="line"><span class="comment">// class:指定对象的类别</span></span><br><span class="line"><span class="comment">// type:指定要赋值参数的类型(因为一个类中同一类型的变量不止一个，故不推荐使用)</span></span><br><span class="line"><span class="comment">// name:要赋值变量的变量名</span></span><br><span class="line"><span class="comment">// value:为变量赋值</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="4-依赖注入-DI"><a href="#4-依赖注入-DI" class="headerlink" title="4.依赖注入(DI)"></a>4.依赖注入(DI)</h2><h3 id="4-1-构造器注入"><a href="#4-1-构造器注入" class="headerlink" title="4.1 构造器注入"></a>4.1 构造器注入</h3><p>前面已经说过(见3.IoC创建对象的方式)</p>
<h3 id="4-2-set方式注入-重点"><a href="#4-2-set方式注入-重点" class="headerlink" title="4.2 set方式注入[重点]"></a>4.2 set方式注入[重点]</h3><p><strong>依赖注入</strong></p>
<ul>
<li>依赖:bean对象的创建依赖于容器</li>
<li>注入:bean对象中的所有属性，由容器来注入</li>
</ul>
<hr>
<p>创建2个实体类</p>
<p>Addres.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用lombok注解创建toString方法和所有属性的getter和setter方法</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>student.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用lombok注解创建toString方法和所有属性的getter和setter方法</span></span><br><span class="line"><span class="comment">//注意:此方式必须要写属性的setter方法,因为这是set注入！！！</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> String[] books;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbys;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; card;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; games;</span><br><span class="line">    <span class="keyword">private</span> String wife;</span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>配置文件<br>bean.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--第一种：普通值注入，value--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address"</span> <span class="attr">class</span>=<span class="string">"com.kuang.pojo.Address"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"安徽"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.kuang.pojo.Student"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第一种：普通值注入，value--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"胡浩"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第二种：对象注入--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- ref引用了id="address"的bean --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">ref</span>=<span class="string">"address"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第三种：数组注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"books"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒站<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第四种：List注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hobbys"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>听歌<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>敲代码<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>看电影<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第五种：map注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"身份证"</span> <span class="attr">value</span>=<span class="string">"123456123456781234"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"银行卡"</span> <span class="attr">value</span>=<span class="string">"233545234624623464"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第六种：Set集合注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"games"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>COC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>BOB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第七种：null值注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"wife"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第八种：Properties注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"driver"</span>&gt;</span>2016302886<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"url"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"password"</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>测试类<br>MyTest.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line"></span><br><span class="line">        Student student = (Student) context.getBean(<span class="string">"student"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(student.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果如下:<br><img src="/2020/03/27/Spring-IoC/4.png" alt="result3"><br><img src="/2020/03/27/Spring-IoC/5.png" alt="result4"><br><img src="/2020/03/27/Spring-IoC/6.png" alt="result5"></p>
<h3 id="4-3-其他方式注入"><a href="#4-3-其他方式注入" class="headerlink" title="4.3 其他方式注入"></a>4.3 其他方式注入</h3><p>我们还可以使用p命名空间注入和c命名空间注入</p>
<p>新建一个类<br>User.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用lombok生成有参构造、无参构造、toString方法和setter,getter方法</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span>  </span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">"http://www.springframework.org/schema/c"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--p命名空间注入，可以直接注入属性的值：property--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.kuang.pojo.User"</span> <span class="attr">p:name</span>=<span class="string">"哈哈"</span> <span class="attr">p:age</span>=<span class="string">"18"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--c命名空间注入,通过构造器注入：construct-args--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user2"</span> <span class="attr">class</span>=<span class="string">"com.kuang.pojo.User"</span> <span class="attr">c:name</span>=<span class="string">"帅哥"</span> <span class="attr">c:age</span>=<span class="string">"18"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"userbeans.xml"</span>);</span><br><span class="line"></span><br><span class="line">        User user1 = context.getBean(<span class="string">"user"</span>,User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        User user2 = (User) context.getBean(<span class="string">"user2"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(user1);</span><br><span class="line">        System.out.println(user2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>结果如下:</p>
<p><img src="/2020/03/27/Spring-IoC/7.png" alt="result6"></p>
<hr>
<p><strong><em>注意</em></strong></p>
<p>p命名和c命名不能直接使用，需要导入xml约束</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">p命名空间：xmlns:p="http://www.springframework.org/schema/p"</span><br><span class="line">c命名空间：xmlns:c="http://www.springframework.org/schema/c"</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Spring Aop</title>
    <url>/2020/03/28/Spring-Aop/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
